{"version":3,"sources":["components/Profile/MyPosts/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/MyPosts/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/MyPosts/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","autoFocus","onBlur","updateStatus","onChange","e","currentTarget","value","ProfileInfo","profile","className","s","descriptionBlock","photos","large","src","Preloader","Post","item","message","likesCount","MyPosts","React","memo","postsElenments","posts","map","p","createRef","postsBlock","AddNewPostFormRedux","onSubmit","values","addPost","newPostText","maxLength10","maxLengthCreator","reduxForm","form","handleSubmit","Field","component","Textarea","name","placeholder","validate","required","MyPostsContainer","connect","state","profilePage","dispatch","actions","addPostActionCreator","Profile","ProfileContainer","userId","this","match","params","authorizedUserID","history","push","getUserProfile","getStatus","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.b2412eac.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__-4697\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__1epnW\",\"posts\":\"MyPosts_posts__297pn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2ochX\"};","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\n\r\ntype ProfileStatusType = {\r\n  status: string,\r\n  updateStatus: (status: string) =>void\r\n}\r\n\r\nexport const ProfileStatusWithHooks = (props: ProfileStatusType) => {\r\n\r\n  let [editMode, setEditMode] = useState<boolean>(false);\r\n  let [status, setStatus] = useState<string>(props.status);\r\n\r\n  useEffect(() =>{\r\n    setStatus(props.status);\r\n  },[props.status]);\r\n\r\n  const activateEditMode = () => {\r\n    setEditMode(true)\r\n  }\r\n\r\n  const deActivateEditMode = () => {\r\n    setEditMode(false);\r\n    props.updateStatus(status);\r\n  }\r\n\r\n  const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setStatus(e.currentTarget.value);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {!editMode &&\r\n      <div>\r\n        <span onDoubleClick={activateEditMode}>{props.status || 'no STATUS'}</span>\r\n      </div>\r\n      }\r\n      {editMode &&\r\n      <div>\r\n        <input autoFocus={true}\r\n               onBlur={deActivateEditMode}\r\n               onChange={onStatusChange}\r\n               value={status}/>\r\n      </div>\r\n      }\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\n","import React from \"react\";\r\nimport s from './ProfileInfo.module.css'\r\nimport Preloader from \"../../../common/Preloader/Preloader\";\r\nimport {AddProfileType} from \"../../Profile\";\r\nimport {ProfileStatus} from './ProfileStatus';\r\nimport {ProfileStatusWithHooks} from './ProfileStatusWithHooks';\r\n\r\nexport const ProfileInfo = (props: AddProfileType) => {\r\n  if (!props.profile) {\r\n    return <Preloader/>\r\n  }\r\n  return (\r\n    <div>\r\n      {/*div><img\r\n        src=\"https://lh4.googleusercontent.com/proxy/x0kSBZDM2lLD9jxQXJ2TydhhwWn8NHTEVtvtAwKCqMVcuNY4EMDe7c2EfnHm5fbGLBVHxqs8HJbBfKhNEZoAAhDe2YFv6HOPAUIec1KHuT-K4adL\"\r\n      />\r\n      </div>*/}\r\n\r\n      <div className={s.descriptionBlock}>\r\n        {\r\n          props.profile.photos.large ? <img src={props.profile.photos.large}/>: null\r\n        }\r\n        avatar + discription\r\n        <ProfileStatusWithHooks status={props.status}\r\n                       updateStatus={props.updateStatus}/>\r\n      </div>\r\n    </div>\r\n  )\r\n};","import React from \"react\";\r\nimport s from './Post.module.css'\r\n\r\ntype PostType = {\r\n  message: string,\r\n  likesCount: number\r\n}\r\n\r\nconst Post = (props: PostType) => {\r\n  return (\r\n    <div className={s.item}>\r\n      <img src={'https://i.pinimg.com/originals/63/2d/6f/632d6f00a809cf8c77f65142395458de.png'}/>\r\n      {props.message}\r\n      <div>\r\n        <span>like </span>{props.likesCount}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Post;","import React from \"react\";\r\nimport s from './MyPosts.module.css';\r\nimport Post from \"./Post/Post\";\r\nimport {PostType} from \"../../../index\";\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {maxLengthCreator, required} from '../../../utils/validators/validators';\r\nimport {Textarea} from '../../common/FormsControls/FormsControls';\r\n\r\ntype MyPostsType = {\r\n  posts: Array<PostType>,\r\n  addPost: (newPostText: string) => void,\r\n  newPostText: string\r\n};\r\n\r\nconst MyPosts = React.memo((props: MyPostsType) => {\r\n\r\n  let postsElenments = props.posts.map(p =>\r\n    <Post message={p.message} likesCount={p.likesCount}/>);\r\n\r\n  let newPostElement = React.createRef();\r\n\r\n  const onAddPost = (values: AddNewPostFormDataType) => {\r\n    props.addPost(values.newPostText);\r\n  };\r\n\r\n  return (\r\n    <div className={s.postsBlock}>\r\n      <h3>My posts</h3>\r\n      <AddNewPostFormRedux onSubmit={onAddPost}/>\r\n      <div className={s.posts}>\r\n        {postsElenments}\r\n      </div>\r\n    </div>\r\n  )\r\n});\r\n\r\nexport type AddNewPostFormDataType = {\r\n  newPostText: string\r\n}\r\n\r\nconst maxLength10 = maxLengthCreator(10);\r\n\r\nconst AddNewPostForm: React.FC<InjectedFormProps<AddNewPostFormDataType>> = (props) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <div>\r\n        <Field component={Textarea}\r\n               name={'newPostText'}\r\n               placeholder={'Enter your post'}\r\n               validate={[required, maxLength10]}\r\n        />\r\n      </div>\r\n      <div>\r\n        <button>Add post</button>\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n\r\nconst AddNewPostFormRedux = reduxForm<AddNewPostFormDataType>({form: 'ProfileAddNewPostForm'})(AddNewPostForm);\r\n\r\nexport default MyPosts;","import React, {Dispatch} from \"react\";\r\nimport {actions, ActionType} from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {StateType} from \"../../../redux/redux-store\";\r\n\r\nconst mapStateToProps = (state: StateType) => {\r\n  return {\r\n    posts: state.profilePage.posts,\r\n    newPostText: state.profilePage.newPostText,\r\n  }\r\n};\r\n\r\nexport type DispatchType = Dispatch<ActionType>;\r\n\r\nconst mapDispatchToProps = (dispatch: DispatchType) => {\r\n  return {\r\n    addPost: (newPostText: string) => {\r\n      dispatch(actions.addPostActionCreator(newPostText));\r\n    },\r\n  }\r\n};\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;","import React from \"react\";\r\nimport {ProfileInfo} from \"./MyPosts/ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileType} from \"../../redux/profile-reducer\";\r\n\r\nexport type AddProfileType = {\r\n  profile: ProfileType,\r\n  status: string,\r\n  updateStatus: (status: string) =>void\r\n};\r\n\r\nconst Profile = (props: AddProfileType) => {\r\n  return (\r\n    <div>\r\n      <ProfileInfo profile={props.profile}\r\n                   status={props.status}\r\n                   updateStatus={props.updateStatus}/>\r\n      <MyPostsContainer/>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default Profile;","import React, {FC} from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getStatus, getUserProfile, ProfileType, updateStatus} from \"../../redux/profile-reducer\";\r\nimport {StateType} from \"../../redux/redux-store\";\r\nimport {RouteComponentProps, withRouter} from \"react-router\";\r\nimport {compose} from \"redux\";\r\n\r\nexport type ProfileContainerType = {\r\n  getUserProfile: (userId: string) => void,\r\n  profile: ProfileType,\r\n  isAuth: boolean,\r\n  getStatus: (userId: string) => void,\r\n  status: string,\r\n  updateStatus: (status: string) => void,\r\n  authorizedUserID: string\r\n}\r\n\r\ntype AddPropsUserIdType = { userId: string };\r\n\r\nclass ProfileContainer extends React.Component<ProfileContainerType & RouteComponentProps<AddPropsUserIdType>> {\r\n\r\n  componentDidMount() {\r\n\r\n    let userId = this.props.match.params.userId;\r\n    if (!userId) {\r\n      userId = this.props.authorizedUserID;\r\n      if (!userId) {\r\n        this.props.history.push('/login')\r\n      }\r\n    }\r\n    this.props.getUserProfile(userId);\r\n    this.props.getStatus(userId);\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <Profile {...this.props}\r\n               profile={this.props.profile}\r\n               status={this.props.status}\r\n               updateStatus={this.props.updateStatus}/>\r\n    )\r\n  }\r\n}\r\n\r\nlet mapStateToProps = (state: StateType) => ({\r\n  profile: state.profilePage.profile,\r\n  status: state.profilePage.status,\r\n  authorizedUserID: state.auth.userId,\r\n  isAuth: state.auth.isAuth\r\n});\r\n\r\nexport default compose<FC>(\r\n  connect(mapStateToProps, {getUserProfile, getStatus, updateStatus}),\r\n  withRouter,\r\n  // withAuthRedirect - убрали на время, чтобы не мешало\r\n)(ProfileContainer)"],"sourceRoot":""}