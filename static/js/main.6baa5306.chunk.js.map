{"version":3,"sources":["hoc/withAuthRedirect.tsx","redux/dialogs-reducer.ts","components/Users/users.module.css","assets/images/default_user.png","assets/images/loadingTS.gif","components/Navbar/Navbar.module.css","api/api.ts","serviceWorker.ts","components/Navbar/Navbar.tsx","components/News/News.tsx","components/Music/Music.tsx","components/Settings/Settings.tsx","redux/users-reducer.ts","components/common/Paginator/Paginator.tsx","components/Users/User.tsx","components/Users/Users.tsx","redux/users-selectors.ts","components/Users/UsersConteiner.tsx","components/Header/Header.tsx","redux/auth-reducer.ts","components/Header/HeaderContainer.tsx","components/Login/Login.tsx","redux/app-reducer.ts","redux/redux-store.ts","hoc/withSuspense.tsx","App.tsx","index.tsx","components/common/FormsControls/FormsControls.module.css","components/common/Preloader/Preloader.tsx","components/common/FormsControls/FormsControls.tsx","components/common/Paginator/Paginator.module.css","utils/validators/validators.ts","components/Header/Header.module.css","redux/profile-reducer.ts"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","connect","fake","props","restProps","to","internalState","dialogs","id","name","messages","message","newMessageBody","actions","sendMessageActionCreator","type","dialogsReducer","action","body","module","exports","instance","axios","create","withCredentials","baseURL","headers","usersAPI","getUsers","currentPage","pageSize","get","then","response","data","follow","userId","post","unFollow","delete","getProfile","console","warn","profileAPI","getStatus","updateStatus","status","put","authAPI","me","login","email","password","rememberMe","logout","Boolean","window","location","hostname","match","Navbar","className","s","nav","item","activeClassName","activLink","News","Music","Settings","initialState","users","totalUsersCount","isFetching","followingInProgress","totaUsersCount","count","usersReducer","map","u","followed","filter","Paginator","totalItemsCount","onPageChanged","portionSize","pagesCount","Math","ceil","pages","i","push","pointCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","styles","pagination","onClick","p","cn","selectedPage","pageNumber","key","e","User","user","userPhoto","src","photos","small","disabled","some","Users","usersPage","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","UsersContainer","this","Preloader","React","setCurrentPage","toggleFollowingProgress","compose","dispatch","resultCode","page","items","totalCount","Header","header","loginBlock","payload","getAuthUserData","authReducer","HeaderContainer","LoginReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","placeholder","component","Input","validate","required","error","formSummaryError","length","stopSubmit","_error","formData","log","initialized","appReducer","reducers","combineReducers","profilePage","profileReducer","dialogsPage","formReducer","app","store","createStore","applyMiddleware","thunkMiddleware","withSuspense","Suspense","fallback","ProfileContainer","lazy","DialogsContainer","App","initializeApp","path","render","AppContainer","withRouter","SamuraiJSApp","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","style","backgroundColor","preloader","FormControl","meta","touched","children","hasError","formControl","Textarea","input","value","maxLengthCreator","maxLength","posts","likesCount","newPostText","profile","addPostActionCreator","deletePostActionCreator","postId","setUserProfile","setStatus","getUserProfile","newPost"],"mappings":"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","file":"static/js/main.6baa5306.chunk.js","sourcesContent":["import {Redirect} from 'react-router-dom';\r\nimport React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {StateType} from '../redux/redux-store';\r\n\r\nlet mapStateToPropsForRedirect = (state: StateType) => ({\r\n  isAuth: state.auth.isAuth\r\n});\r\n\r\ntype MapPropsType = {\r\n  isAuth: boolean\r\n};\r\n\r\ntype DispatchPropsType = {\r\n  fake: () => void\r\n}\r\n\r\nexport function withAuthRedirect<WCP>(Component: React.ComponentType<WCP>) {\r\n\r\n  debugger\r\n\r\n  const RedirectComponent: React.FC<DispatchPropsType & MapPropsType> = (props) => {\r\n    debugger\r\n    let {isAuth, fake, ...restProps} = props;\r\n    if (!isAuth) {\r\n      return <Redirect to={'/login'}/>\r\n    }\r\n    return <Component {...restProps as unknown as WCP}/>\r\n  }\r\n\r\n  let ConnectedAuthRedirectComponent = connect<MapPropsType, DispatchPropsType, WCP, StateType>(\r\n    mapStateToPropsForRedirect, {\r\n      fake: () => {\r\n      }\r\n    })\r\n  (RedirectComponent);\r\n\r\n  return ConnectedAuthRedirectComponent;\r\n}\r\n\r\n// НЕ УДАЛЯТЬ !!!\r\n//                   !!!!!            ТИПИЗАЦИЯ\r\n// https://www.youtube.com/watch?v=TnRx8_n4SYI&feature=youtu.be&list=PLcvhF2Wqh7DM3z1XqMw0kPuxpbyMo3HvN&t=3089\r\n\r\n// let mapStateToPropsForRedirect = (state: StateType) => ({\r\n//   isAuth: state.auth.isAuth\r\n// });\r\n//\r\n// export const withAuthRedirect = (Component: any) => {\r\n//\r\n//   class RedirectComponent extends React.Component<any> {\r\n//\r\n//     render() {\r\n//       if (!this.props.isAuth) {\r\n//         return <Redirect to={'/login'}/>\r\n//       }\r\n//       return <Component {...this.props}/>\r\n//     }\r\n//   }\r\n//\r\n//   let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n//\r\n//   return ConnectedAuthRedirectComponent;\r\n// }\r\n//          ??????????????????????????????????????????????\r\n// что такое FC  as unknown as WCP","import {InferActionsTypes} from \"./redux-store\";\r\nimport {DialogType, MessageType} from \"../index\";\r\n\r\ntype DialogsReducerType =\r\n  {\r\n    dialogs: Array<DialogType>,\r\n    messages: Array<MessageType>\r\n    newMessageBody: string\r\n  }\r\n\r\nlet internalState: DialogsReducerType = {\r\n  dialogs:\r\n    [\r\n      {id: 1, name: 'Dmitry'},\r\n      {id: 2, name: 'Andrey'},\r\n      {id: 3, name: 'Alexander'},\r\n      {id: 4, name: 'Victoriya'},\r\n      {id: 5, name: 'Nadezhda'},\r\n      {id: 6, name: 'Alex'}\r\n    ],\r\n  messages:\r\n    [\r\n      {id: 1, message: 'Hi'},\r\n      {id: 2, message: 'What it is'},\r\n      {id: 3, message: 'Go-go-go'},\r\n      {id: 4, message: 'Good'},\r\n      {id: 5, message: 'thanksgiving'},\r\n      {id: 6, message: 'fame and honor'}\r\n    ],\r\n  newMessageBody: ''\r\n};\r\n\r\nconst dialogsReducer = (state: DialogsReducerType = internalState, action: ActionType) => {\r\n\r\n  switch (action.type) {\r\n    case 'SEND_MESSAGE':\r\n      let body = action.newMessageBody;\r\n      return {\r\n        ...state,\r\n        newMessageBody: '',\r\n        messages: [...state.messages, {id: 7, message: body}],\r\n      };\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport type ActionType = InferActionsTypes<typeof actions>;\r\n\r\nexport const actions = {\r\n  sendMessageActionCreator: (newMessageBody: string) => ({\r\n    type: 'SEND_MESSAGE',\r\n    newMessageBody\r\n  } as const)\r\n}\r\n\r\nexport default dialogsReducer;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"selectedPage\":\"users_selectedPage__dHKD9\"};","module.exports = __webpack_public_path__ + \"static/media/default_user.58fd4a49.png\";","module.exports = __webpack_public_path__ + \"static/media/loadingTS.deb417a9.gif\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__1ewbe\",\"item\":\"Navbar_item__2ByHM\",\"activLink\":\"Navbar_activLink__3lOMl\"};","import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n  withCredentials: true,\r\n  baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n  headers: {\r\n    'API-KEY': '7670157b-55fb-46c4-91b5-ea5772613da8'\r\n  }\r\n});\r\n\r\n\r\nexport const usersAPI = {\r\n  getUsers(currentPage: number = 1, pageSize:number = 10) {\r\n    return instance.get(`users?page=${currentPage}&count=${pageSize}`\r\n    )\r\n      .then(response => response.data);\r\n  },\r\n\r\n  follow(userId: string) {\r\n    return instance.post(`follow/${userId}`)\r\n\r\n  },\r\n  unFollow(userId: string) {\r\n    return instance.delete(`follow/${userId}`)\r\n  },\r\n  getProfile(userId: string) {\r\n    console.warn('Obsolute method. Please use profileAPI object')\r\n    return profileAPI.getProfile(userId);\r\n  }\r\n}\r\n\r\nexport const profileAPI = {\r\n  getProfile(userId: string) {\r\n    return instance.get(`profile/` + userId);\r\n  },\r\n  getStatus(userId: string) {\r\n    return instance.get(`profile/status/` + userId);\r\n  },\r\n  updateStatus(status: string) {\r\n    return instance.put(`profile/status`, {status: status});\r\n  }\r\n}\r\n\r\nexport const authAPI = {\r\n  me() {\r\n    return instance.get(`auth/me`)\r\n  },\r\n  login(email: string, password: string, rememberMe = false) {\r\n    return instance.post(`auth/login`, {email, password, rememberMe});\r\n  },\r\n  logout() {\r\n    return instance.delete(`auth/login`);\r\n  }\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport s from './Navbar.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst Navbar = () => {\r\n  return (\r\n    <nav className={s.nav}>\r\n      <div className={`${s.item}`}>\r\n        <NavLink to={'/profile'} activeClassName={s.activLink}>TS Profile TS</NavLink>\r\n      </div>\r\n      <div className={s.item}>\r\n        <NavLink to={'/dialogs'} activeClassName={s.activLink}>TS Message TS</NavLink>\r\n      </div>\r\n      <div className={s.item}>\r\n        <NavLink to={'/users'} activeClassName={s.activLink}>TS Users TS</NavLink>\r\n      </div>\r\n      <div className={s.item}>\r\n        <NavLink to={'/news'} activeClassName={s.activLink}>TS News TS</NavLink>\r\n      </div>\r\n      <div className={s.item}>\r\n        <NavLink to={'/music'} activeClassName={s.activLink}>TS Music TS</NavLink>\r\n      </div>\r\n      <div className={s.item}>\r\n        <NavLink to={'/settings'} activeClassName={s.activLink}>TS Settings TS</NavLink>\r\n      </div>\r\n    </nav>\r\n  )\r\n}\r\n\r\nexport default Navbar;","import React from \"react\";\r\nimport s from './News.module.css'\r\n\r\nconst News = () => {\r\n  return (\r\n    <div>\r\n      News\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default News;","import React from \"react\";\r\nimport s from './Music.module.css'\r\n\r\nconst Music = () => {\r\n  return (\r\n    <div>\r\n      Music\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default Music;","import React from \"react\";\r\nimport s from './Settings.module.css'\r\n\r\nconst Settings = () => {\r\n  return (\r\n    <div>\r\n      Settings\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default Settings;","import {InferActionsTypes} from \"./redux-store\";\r\nimport {usersAPI} from '../api/api';\r\nimport {Dispatch} from 'react';\r\n\r\nexport type UserType = {\r\n  id: string,\r\n  name: string,\r\n  photos: {\r\n    small: string,\r\n    large: string\r\n  },\r\n  followed: boolean,\r\n  status: string,\r\n  location: {\r\n    city: string,\r\n    country: string\r\n  }\r\n}\r\n\r\nexport type UsersReducerType =\r\n  {\r\n    users: Array<UserType>,\r\n    pageSize: number,\r\n    totalUsersCount: number,\r\n    currentPage: number,\r\n    isFetching: boolean,\r\n    followingInProgress: Array<string>\r\n  }\r\n\r\nlet initialState: UsersReducerType = {\r\n  users: [],\r\n  pageSize: 100,\r\n  totalUsersCount: 0,\r\n  currentPage: 1,\r\n  isFetching: true,\r\n  followingInProgress: []\r\n};\r\n\r\nconst usersReducer = (state: UsersReducerType = initialState, action: ActionType) => {\r\n\r\n  switch (action.type) {\r\n    case 'FOLLOW':\r\n      return {\r\n        ...state,\r\n        users: state.users.map(u => {\r\n          if (u.id === action.userId) {\r\n            return {...u, followed: true}\r\n          }\r\n          return u;\r\n        })\r\n      }\r\n    case 'UNFOLLOW':\r\n      return {\r\n        ...state,\r\n        users: state.users.map(u => {\r\n          if (u.id === action.userId) {\r\n            return {...u, followed: false}\r\n          }\r\n          return u;\r\n        })\r\n      }\r\n    case 'SET_USERS': {\r\n      return {...state, users: action.users}\r\n    }\r\n    case 'SET_CURRENT_PAGE': {\r\n      return {...state, currentPage: action.currentPage}\r\n    }\r\n    case 'SET_TOTAL_USERS_COUNT': {\r\n      return {...state, totalUsersCount: action.count}\r\n    }\r\n    case 'TOGGLE_IS_FETCHING': {\r\n      return {...state, isFetching: action.isFetching}\r\n    }\r\n    case 'TOGGLE_IS_FOLLOWING_PROGRESS': {\r\n      return {\r\n        ...state,\r\n        followingInProgress:\r\n          action.isFetching\r\n            ? [...state.followingInProgress, action.userId]\r\n            : state.followingInProgress.filter(id => id !== action.userId)\r\n      }\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\ntype ActionType = InferActionsTypes<typeof actions>;\r\n\r\nexport const actions = {\r\n   followSuccess : (userId: string) => ({type: 'FOLLOW', userId} as const),\r\n   unFollowSuccess : (userId: string)=> ({type: 'UNFOLLOW', userId} as const),\r\n   setUsers : (users: Array<UserType>)=> ({type: 'SET_USERS', users} as const),\r\n   setCurrentPage : (currentPage: number) => ({\r\n    type: 'SET_CURRENT_PAGE',\r\n    currentPage: currentPage\r\n  } as const),\r\n   setTotalUsersCount : (totaUsersCount: number) => ({\r\n    type: 'SET_TOTAL_USERS_COUNT',\r\n    count: totaUsersCount\r\n  } as const),\r\n   toggleIsFetching : (isFetching: boolean) => ({\r\n    type: 'TOGGLE_IS_FETCHING',\r\n    isFetching\r\n  } as const),\r\n   toggleFollowingProgress : (isFetching: boolean, userId: string) => ({\r\n    type: 'TOGGLE_IS_FOLLOWING_PROGRESS',\r\n    isFetching,\r\n    userId\r\n  } as const),\r\n}\r\n\r\ntype DispatchType = Dispatch<ActionType>;\r\n\r\nexport const requestUsers = (page: number, pageSize: number) => {\r\n  return (dispatch: DispatchType) => {\r\n    dispatch(actions.toggleIsFetching(true));\r\n    dispatch(actions.setCurrentPage(page));\r\n    usersAPI.getUsers(page, pageSize).then(data => {\r\n      dispatch(actions.toggleIsFetching(false));\r\n      dispatch(actions.setUsers(data.items));\r\n      dispatch(actions.setTotalUsersCount(data.totalCount));\r\n    });\r\n  }\r\n}\r\n\r\nexport const follow = (userId: string) => {\r\n  return (dispatch: DispatchType) => {\r\n    dispatch(actions.toggleFollowingProgress(true, userId));\r\n    usersAPI.follow(userId).then(response => {\r\n      if (response.data.resultCode === 0) {\r\n        dispatch(actions.followSuccess(userId));\r\n      }\r\n      dispatch(actions.toggleFollowingProgress(false, userId));\r\n    });\r\n  }\r\n}\r\n\r\nexport const unFollow = (userId: string) => {\r\n  return (dispatch: DispatchType) => {\r\n    dispatch(actions.toggleFollowingProgress(true, userId));\r\n    usersAPI.unFollow(userId).then(response => {\r\n      if (response.data.resultCode === 0) {\r\n        dispatch(actions.unFollowSuccess(userId));\r\n      }\r\n      dispatch(actions.toggleFollowingProgress(false, userId));\r\n    });\r\n  }\r\n}\r\n\r\nexport default usersReducer","import React, {useState} from 'react';\r\nimport styles from \"./Paginator.module.css\";\r\nimport cn from 'classnames';\r\n\r\ntype PaginatorType = {\r\n  currentPage: number\r\n  onPageChanged: (pageNumber: number) => void,\r\n  totalItemsCount: number\r\n  pageSize: number\r\n  portionSize?: number\r\n}\r\n\r\nlet Paginator: React.FC<PaginatorType> = ({totalItemsCount, pageSize, currentPage, onPageChanged, portionSize = 10}) => {\r\n  debugger\r\n\r\n  let pagesCount = Math.ceil(totalItemsCount / pageSize);\r\n  let pages = [];\r\n  for (let i = 1; i <= pagesCount; i++) {\r\n    pages.push(i);\r\n  }\r\n\r\n  let pointCount = Math.ceil(pagesCount / portionSize);\r\n  let [portionNumber, setPortionNumber] = useState(1);\r\n  let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n  let rightPortionPageNumber = portionNumber * portionSize;\r\n\r\n  return (\r\n    <div className={styles.pagination}>\r\n      {portionNumber > 1 && <button onClick={() => {\r\n        setPortionNumber(portionNumber - 1)\r\n      }}>PREV</button>}\r\n\r\n\r\n      {pages\r\n        .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n        .map((p) => {\r\n          return <span className={cn({[styles.selectedPage]: currentPage === p}, styles.pageNumber)}\r\n                       key={p}\r\n                       onClick={(e) => {\r\n                         onPageChanged(p);\r\n                       }}>{p}</span>\r\n        })}\r\n      {pointCount > portionNumber &&\r\n      <button onClick={() => {\r\n        setPortionNumber(portionNumber + 1)\r\n      }}>NEXT</button>}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Paginator;","import React from 'react';\r\nimport styles from \"./users.module.css\";\r\nimport userPhoto from \"../../assets/images/default_user.png\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {UserType} from '../../redux/users-reducer';\r\n\r\n\r\nexport type UserAddType = {\r\n  user: UserType,\r\n  followingInProgress: Array<string>\r\n  follow: (userId: string) => void\r\n  unFollow: (userId: string) => void\r\n}\r\n\r\nconst User : React.FC<UserAddType>= ({user, followingInProgress, unFollow, follow}) => {\r\n  return (\r\n    <div>\r\n      <span>\r\n        <div>\r\n          <NavLink to={'/profile/' + user.id}>\r\n            <img\r\n              className={styles.userPhoto}\r\n              src={user.photos.small != null ? user.photos.small : userPhoto}/>\r\n          </NavLink>\r\n        </div>\r\n        <div>\r\n          {user.followed\r\n            ? <button disabled={followingInProgress.some(id => id === user.id)}\r\n                      onClick={() => {\r\n                        unFollow(user.id)\r\n                      }}>Unfollow</button>\r\n            : <button disabled={followingInProgress.some(id => id === user.id)}\r\n                      onClick={() => {\r\n                        follow(user.id)\r\n                      }}>Follow</button>\r\n          }\r\n        </div>\r\n          </span>\r\n      <span>\r\n             <span>\r\n               <div> {user.name}</div>\r\n               <div>{user.status}</div>\r\n             </span>\r\n             <span>\r\n               <div>{\"user.location.country\"}</div>\r\n               <div>{'user.location.city'}</div>\r\n             </span>\r\n          </span>\r\n    </div>)\r\n}\r\n\r\nexport default User;","import React from 'react';\r\nimport Paginator from '../common/Paginator/Paginator';\r\nimport User from './User';\r\nimport {UserType} from '../../redux/users-reducer';\r\n\r\nexport type UsersType = {\r\n  users: Array<UserType>,\r\n  onPageChanged: (pageNumber: number) => void,\r\n  currentPage: number,\r\n  pageSize: number,\r\n  totalUsersCount: number,\r\n  followingInProgress: Array<string>\r\n  follow: (userId: string) => void\r\n  unFollow: (userId: string) => void\r\n}\r\n\r\nlet Users: React.FC<UsersType> = ({currentPage, onPageChanged, totalUsersCount, pageSize, users, ...props}) => {\r\n\r\n  return (\r\n    <div>\r\n      <Paginator currentPage={currentPage}\r\n                 onPageChanged={onPageChanged}\r\n                 totalItemsCount={totalUsersCount}\r\n                 pageSize={pageSize}/>\r\n      <div>\r\n        {\r\n          users.map(u =>\r\n            <User\r\n              user={u}\r\n              followingInProgress={props.followingInProgress}\r\n              unFollow={props.unFollow}\r\n              follow={props.follow}\r\n              key={u.id}/>\r\n          )}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Users;\r\n\r\n","import {AppStateType} from './redux-store';\r\n\r\nexport const getUsers = (state: AppStateType) => {\r\n  return state.usersPage.users;\r\n}\r\n\r\nexport const getPageSize = (state: AppStateType) => {\r\n  return state.usersPage.pageSize;\r\n}\r\n\r\nexport const getTotalUsersCount = (state: AppStateType) => {\r\n  return state.usersPage.totalUsersCount;\r\n}\r\n\r\nexport const getCurrentPage = (state: AppStateType) => {\r\n  return state.usersPage.currentPage;\r\n}\r\n\r\nexport const getIsFetching = (state: AppStateType) => {\r\n  return state.usersPage.isFetching;\r\n}\r\n\r\nexport const getFollowingInProgress = (state: AppStateType) => {\r\n  return state.usersPage.followingInProgress;\r\n}\r\n","import React, {FC} from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {actions, follow, requestUsers, unFollow, UserType} from \"../../redux/users-reducer\";\r\nimport Users from \"./Users\";\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\n\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect';\r\nimport {compose} from 'redux';\r\nimport {\r\n  getCurrentPage,\r\n  getFollowingInProgress,\r\n  getIsFetching,\r\n  getPageSize,\r\n  getTotalUsersCount,\r\n  getUsers\r\n} from '../../redux/users-selectors';\r\n\r\n\r\nexport type UsersContainerType = {\r\n  users: Array<UserType>,\r\n  currentPage: number,\r\n  pageSize: number,\r\n  setCurrentPage: (totalCount: number) => void,\r\n  totalUsersCount: number,\r\n  isFetching: boolean,\r\n  toggleFollowingProgress: (isFetching: boolean, userId: string) => void,\r\n  followingInProgress: Array<string>,\r\n  getUsers: (currentPage: number, pageSize: number) => void,\r\n  follow: (userId: string) => void\r\n  unFollow: (userId: string) => void\r\n}\r\n// в React.Component приходят <тип пропса, стейт>\r\n// class Users extends React.Component<UsersContainerType, {}> {\r\n\r\nclass UsersContainer extends React.Component<UsersContainerType> {\r\n\r\n  componentDidMount() {\r\n    this.props.getUsers(this.props.currentPage, this.props.pageSize);\r\n  }\r\n\r\n  onPageChanged = (pageNumber: number) => {\r\n    this.props.getUsers(pageNumber, this.props.pageSize);\r\n  }\r\n\r\n  render() {\r\n\r\n    return <>\r\n      {this.props.isFetching ?\r\n        <Preloader/>\r\n        : null}\r\n      <Users\r\n        totalUsersCount={this.props.totalUsersCount}\r\n        pageSize={this.props.pageSize}\r\n        currentPage={this.props.currentPage}\r\n        onPageChanged={this.onPageChanged}\r\n        users={this.props.users}\r\n        follow={this.props.follow}\r\n        unFollow={this.props.unFollow}\r\n        followingInProgress={this.props.followingInProgress}\r\n      />\r\n    </>\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n  return {\r\n    users: getUsers(state),\r\n    pageSize: getPageSize(state),\r\n    totalUsersCount: getTotalUsersCount(state),\r\n    currentPage: getCurrentPage(state),\r\n    isFetching: getIsFetching(state),\r\n    followingInProgress: getFollowingInProgress(state),\r\n  }\r\n}\r\n\r\nconst setCurrentPage = actions.setCurrentPage\r\nconst toggleFollowingProgress = actions.toggleFollowingProgress\r\n\r\nexport default compose<FC>(\r\n  connect(mapStateToProps, {follow, unFollow, setCurrentPage, toggleFollowingProgress, getUsers: requestUsers}),\r\n  withAuthRedirect\r\n)(UsersContainer);","import React from \"react\";\r\nimport s from './Header.module.css';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\nexport type HeaderType ={\r\n  isAuth: boolean\r\n  login : string\r\n  logout: () => void\r\n}\r\n\r\nconst Header = (props:HeaderType) => {\r\n  return (\r\n    <header className={s.header}>\r\n      <img src='https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTmZJl9r7JapjoydUuxwLEWyGBSJqFNwoBfRGlnZYdXzd-YoXY2Yo2ylJnjng&s'/>\r\n      <div className={s.loginBlock}>\r\n        {props.isAuth\r\n            ? <div>{props.login} - <button onClick={props.logout}>Log out</button></div>\r\n          : <NavLink to={'/login'}>Login</NavLink>\r\n        }\r\n\r\n      </div>\r\n    </header>\r\n  )\r\n}\r\nexport default Header;","import {AppStateType, InferActionsTypes} from './redux-store';\r\nimport {authAPI} from '../api/api';\r\nimport {FormAction, stopSubmit} from 'redux-form';\r\nimport {Dispatch} from 'react';\r\nimport {ThunkAction} from 'redux-thunk';\r\n// import {ThunkDispatch} from 'redux-thunk'; - вместо 5 строки, если использовать другую типизацию на 55-58 строках\r\n\r\nexport type InitialStateType = {\r\n  userId: null | string,\r\n  email: null | string,\r\n  login: null | string,\r\n  isAuth: boolean\r\n}\r\n\r\nlet initialState: InitialStateType = {\r\n  userId: null,\r\n  email: null,\r\n  login: null,\r\n  isAuth: false\r\n};\r\n\r\nconst authReducer = (state: InitialStateType = initialState, action: ActionType) => {\r\n\r\n  switch (action.type) {\r\n    case 'SET_USER_DATA':\r\n      return {\r\n        ...state,\r\n        ...action.payload\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\ntype ActionType = InferActionsTypes<typeof actions>;\r\n\r\nexport const actions = {\r\n  setAuthUserData: (userId: string | null, email: string | null, login: string | null, isAuth: boolean) =>\r\n    ({type: 'SET_USER_DATA', payload: {userId, email, login, isAuth}} as const)\r\n}\r\n\r\ntype DispatchType = Dispatch<ActionType>;\r\n\r\n// !!! SetUserDataACType можно вместо него общий экшен передавать ActionType\r\nexport const getAuthUserData = () => (dispatch: DispatchType) => {\r\n  return authAPI.me()\r\n    .then(response => {\r\n      if (response.data.resultCode === 0) {\r\n        let {id, email, login} = response.data.data;\r\n        dispatch(actions.setAuthUserData(id, email, login, true));\r\n      }\r\n    });\r\n}\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean): ThunkAction<void, AppStateType, {}, ActionType | FormAction> =>\r\n  // !!! вместо типизации на 54 строке  ThunkAction<void, AppStateType, {}, ActionType | FormAction>\r\n  // добавляем(dispatch: ThunkDispatch<InitialStateType, unknown, ActionType | FormAction>) => {\r\n    (dispatch) => {\r\n    authAPI.login(email, password, rememberMe)\r\n      .then(response => {\r\n        if (response.data.resultCode === 0) {\r\n          dispatch(getAuthUserData())\r\n        } else {\r\n          const messages = response.data.messages.length > 0 ? response.data.messages[0] : 'Some error'\r\n          dispatch(stopSubmit('login', {_error: messages}));\r\n        }\r\n      });\r\n  }\r\n\r\nexport const logout = () => (dispatch: DispatchType) => {\r\n  authAPI.logout()\r\n    .then(response => {\r\n      if (response.data.resultCode === 0) {\r\n        dispatch(actions.setAuthUserData(null, null, null, false));\r\n      }\r\n    });\r\n}\r\n\r\nexport default authReducer;","import React from 'react';\r\nimport Header from './Header';\r\nimport {connect} from 'react-redux';\r\nimport {logout} from '../../redux/auth-reducer';\r\nimport {StateType} from '../../redux/redux-store';\r\n\r\nexport type HeaderContainerType = {\r\n  isAuth: boolean,\r\n  login: string,\r\n  logout: () => void\r\n}\r\n\r\nclass HeaderContainer extends React.Component<HeaderContainerType> {\r\n\r\n  render() {\r\n    return (\r\n      <Header {...this.props}/>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: StateType) => ({\r\n  isAuth: state.auth.isAuth,\r\n  login: state.auth.login,\r\n});\r\n\r\nexport default connect(mapStateToProps, {logout})(HeaderContainer);","import React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {Input} from '../common/FormsControls/FormsControls';\r\nimport {required} from '../../utils/validators/validators';\r\nimport {connect} from 'react-redux';\r\nimport {login} from '../../redux/auth-reducer';\r\nimport styles from '../common/FormsControls/FormsControls.module.css'\r\nimport {StateType} from '../../redux/redux-store';\r\n\r\ntype LoginFormDataType = {\r\n  email: string,\r\n  password: string,\r\n  rememberMe: boolean\r\n}\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<LoginFormDataType>> = (props) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <div>\r\n        <Field placeholder={'Email'}\r\n               name={'email'}\r\n               component={Input}\r\n               validate={[required]}\r\n        />\r\n      </div>\r\n      <div>\r\n        <Field placeholder={'Password'}\r\n               name={'password'}\r\n               type={'password'}\r\n               component={Input}\r\n               validate={[required]}\r\n        />\r\n      </div>\r\n      <div>\r\n        <Field type={'checkbox'}\r\n               name={'rememberMe'}\r\n               component={Input}\r\n        /> remember me\r\n      </div>\r\n      {props.error && <div className={styles.formSummaryError}>\r\n        {props.error}\r\n      </div>}\r\n      <div>\r\n        <button>Login</button>\r\n      </div>\r\n    </form>\r\n  )\r\n};\r\n\r\nconst LoginReduxForm = reduxForm<LoginFormDataType>({form: 'login'})(LoginForm)\r\n\r\ntype LoginType = {\r\n  isAuth: boolean,\r\n  login: (email: string, password: string, rememberMe: boolean) => void\r\n}\r\n\r\nconst Login = (props:LoginType) => {\r\n  debugger\r\n  const onSubmit = (formData:LoginFormDataType) => {\r\n    console.log(formData);\r\n    props.login(formData.email, formData.password, formData.rememberMe)\r\n  }\r\n  return (\r\n    <div>\r\n      <h1>Login</h1>\r\n      <LoginReduxForm onSubmit={onSubmit}/>\r\n    </div>\r\n  )\r\n};\r\n\r\nconst mapStateToProps = (state: StateType) => ({\r\n  isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default connect(mapStateToProps, {login})(Login);","import {getAuthUserData} from './auth-reducer';\r\nimport {AppStateType, InferActionsTypes} from './redux-store';\r\nimport {ThunkDispatch} from 'redux-thunk';\r\n\r\nlet initialState = {\r\n  initialized: false\r\n};\r\n\r\nconst appReducer = (state = initialState, action: ActionType) => {\r\n\r\n  switch (action.type) {\r\n    case 'INITIALIZED_SUCCESS':\r\n      return {\r\n        ...state,\r\n        initialized: true\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\ntype ActionType = InferActionsTypes<typeof actions>;\r\n\r\nexport const actions = {\r\n initializedSuccess:  () => ({type: 'INITIALIZED_SUCCESS'} as const)\r\n}\r\n\r\nexport const initializeApp = () => (dispatch: ThunkDispatch<AppStateType, unknown, ActionType>) => {\r\n  const promise = dispatch(getAuthUserData());\r\n  // !!! если промисов или условий много, то тогда через массив Promise.all([promise]).then ...\r\n  promise.then(() => {\r\n    dispatch(actions.initializedSuccess());\r\n  });\r\n}\r\n\r\nexport default appReducer;","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport profileReducer, {ProfileType} from \"./profile-reducer\";\r\nimport dialogsReducer from \"./dialogs-reducer\";\r\nimport usersReducer, {UserType} from \"./users-reducer\";\r\nimport authReducer from './auth-reducer';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport {reducer as formReducer} from 'redux-form';\r\n\r\nimport {DialogType, MessageType, PostType} from \"../index\";\r\nimport appReducer from './app-reducer';\r\n\r\nexport type StateType = {\r\n  profilePage: {\r\n    posts: Array<PostType>,\r\n    newPostText: string,\r\n    profile: ProfileType,\r\n    status: string\r\n  },\r\n  dialogsPage: {\r\n    dialogs: Array<DialogType>,\r\n    messages: Array<MessageType>\r\n    newMessageBody: string\r\n  },\r\n  usersPage: {\r\n    users: Array<UserType>,\r\n    pageSize: number,\r\n    totalUsersCount: number,\r\n    currentPage: number,\r\n    isFetching: boolean,\r\n    toggleFollowingProgress: (isFetching: boolean, userId: string) => void,\r\n    followingInProgress: Array<string>\r\n  }\r\n  sidebar: any,\r\n  auth: {\r\n    isAuth: boolean\r\n    login: string\r\n    userId: string\r\n  },\r\n  app: {\r\n    initialized: boolean\r\n  }\r\n};\r\n\r\nexport type DialogsPageType = {\r\n  dialogs: Array<DialogType>,\r\n  messages: Array<MessageType>,\r\n  newMessageBody: string,\r\n};\r\n\r\nlet reducers = combineReducers({\r\n  profilePage: profileReducer,\r\n  dialogsPage: dialogsReducer,\r\n  // sidebar: sidebarReducer,\r\n  usersPage: usersReducer,\r\n  auth: authReducer,\r\n  form: formReducer,\r\n  app: appReducer,\r\n});\r\n\r\ntype PropertiesTypes<T> = T extends { [key: string]: infer U } ? U : never;\r\n\r\nexport type InferActionsTypes<T extends { [key: string]: (...arg: any[]) => any }> = ReturnType<PropertiesTypes<T>>\r\n\r\nexport type AppStateType = ReturnType<typeof reducers>\r\n\r\nlet store: ReturnType<typeof createStore> = createStore(reducers, applyMiddleware(thunkMiddleware));\r\n\r\nexport default store;","import React from 'react';\r\n\r\n\r\nexport const withSuspense = (Component: any) => {\r\n\r\n  return (props: any) => {\r\n    return (<React.Suspense fallback={<div>Loading</div>}>\r\n      <Component {...props}/>\r\n    </React.Suspense>)\r\n  }\r\n}\r\n\r\n","import React from 'react';\r\nimport {HashRouter, Route, withRouter} from \"react-router-dom\";\r\nimport './App.css';\r\nimport Navbar from \"./components/Navbar/Navbar\";\r\nimport News from \"./components/News/News\";\r\nimport Music from \"./components/Music/Music\";\r\nimport Settings from \"./components/Settings/Settings\";\r\nimport UsersContainer from \"./components/Users/UsersConteiner\";\r\nimport HeaderContainer from './components/Header/HeaderContainer';\r\nimport LoginPage from './components/Login/Login';\r\nimport {connect, Provider} from 'react-redux';\r\nimport {compose} from 'redux';\r\nimport {initializeApp} from './redux/app-reducer';\r\nimport Preloader from './components/common/Preloader/Preloader';\r\nimport store, {StateType} from './redux/redux-store';\r\nimport {withSuspense} from './hoc/withSuspense';\r\n\r\nconst ProfileContainer = React.lazy(() => import('./components/Profile/ProfileContainer'));\r\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer'));\r\n\r\n\r\ntype MapStatePropType = {\r\n  initialized: boolean\r\n}\r\n\r\ntype MapDispatchPropType = {\r\n  initializeApp: () => void\r\n}\r\n\r\nclass App extends React.Component<MapStatePropType & MapDispatchPropType> {\r\n\r\n  componentDidMount() {\r\n    this.props.initializeApp()\r\n  }\r\n\r\n  render() {\r\n\r\n    if (!this.props.initialized) {\r\n      return <Preloader/>\r\n    }\r\n\r\n    return (\r\n      <div className={'app-wrapper'}>\r\n        <HeaderContainer/>\r\n        <Navbar/>\r\n        <div className={'app-wrapper-content'}>\r\n          <Route path={'/profile/:userId?'}\r\n                 render={withSuspense(ProfileContainer)}/>\r\n          <Route path={'/dialogs'}\r\n                 render={withSuspense(DialogsContainer)}/>\r\n          <Route path={'/users'}\r\n                 render={() => <UsersContainer/>}/>\r\n          <Route path={'/login'}\r\n                 render={() => <LoginPage/>}/>\r\n\r\n\r\n          <Route\r\n            path={'/news'}\r\n            component={News}/>\r\n          <Route\r\n            path={'/music'}\r\n            component={Music}/>\r\n          <Route\r\n            path={'/settings'}\r\n            component={Settings}/>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToPropse = (state: StateType): MapStatePropType => ({\r\n  initialized: state.app.initialized\r\n})\r\n\r\nconst AppContainer = compose(\r\n  withRouter,\r\n  connect(mapStateToPropse, {initializeApp}))(App);\r\n\r\nexport const SamuraiJSApp = (props) => {\r\n  // return <HashRouter basename={process.env.PUBLIC_URL}>\r\n  return <HashRouter>\r\n    <Provider store={store}>\r\n      <AppContainer/>\r\n    </Provider>\r\n  </HashRouter>\r\n}\r\n","import * as serviceWorker from './serviceWorker';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {SamuraiJSApp} from './App';\r\n\r\nReactDOM.render(<SamuraiJSApp/>, document.getElementById('root'));\r\n\r\nexport type PostType = {\r\n  id: number,\r\n  message: string,\r\n  likesCount: number\r\n};\r\n\r\nexport type DialogType = {\r\n  id: number,\r\n  name: string,\r\n};\r\n\r\nexport type MessageType = {\r\n  id: number,\r\n  message: string,\r\n};\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__kHGKy\",\"error\":\"FormsControls_error__3kwBc\",\"formSummaryError\":\"FormsControls_formSummaryError___hAhz\"};","import React from 'react';\r\nimport preloader from '../../../assets/images/loadingTS.gif'\r\n\r\nconst Preloader = () => {\r\n  return (\r\n    <div style={{backgroundColor: 'green'}}>\r\n      <img src={preloader}/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Preloader","import React from \"react\";\r\nimport styles from './FormsControls.module.css';\r\nimport {WrappedFieldMetaProps, WrappedFieldProps} from 'redux-form';\r\n\r\ntype FormControlPropsType = {\r\n  meta: WrappedFieldMetaProps\r\n}\r\n\r\nconst FormControl: React.FC<FormControlPropsType> = ({meta: { touched, error }, children}) => {\r\n\r\n  const hasError = touched && error;\r\n  return (\r\n    <div className={styles.formControl + ' ' + (hasError ? styles.error : '')}>\r\n      <div>\r\n        {children}\r\n      </div>\r\n      {hasError && <span>{error}</span>}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport const Textarea = (props: WrappedFieldProps) => {\r\n\r\n  const {input, meta, ...restProps} = props;\r\n\r\n  return (\r\n    <FormControl {...props}><textarea {...input} {...restProps}/></FormControl>\r\n  )\r\n}\r\n\r\nexport const Input = (props: WrappedFieldProps) => {\r\n  const {input, meta, ...restProps} = props;\r\n  return (\r\n    <FormControl {...props}><input {...input} {...restProps}/></FormControl>\r\n  )\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pagination\":\"Paginator_pagination__2ikXC\",\"pageNumber\":\"Paginator_pageNumber__1Myg6\",\"selectedPage\":\"Paginator_selectedPage__wXtyc\"};","export const required = (value: string) => {\r\n  if (value) return undefined;\r\n  return 'Field is required';\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number) => (value: string) => {\r\n  if (value.length > maxLength) {\r\n    return `Max length is ${maxLength} symbols`;\r\n  }\r\n  return undefined;\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1wC8C\",\"loginBlock\":\"Header_loginBlock__3nAcb\"};","import {PostType} from \"../index\";\r\nimport {InferActionsTypes} from \"./redux-store\";\r\nimport {profileAPI, usersAPI} from '../api/api';\r\nimport {Dispatch} from 'react';\r\n\r\nexport type ProfileType = {\r\n  aboutMe: string,\r\n  contacts:\r\n    {\r\n      facebook: null | string,\r\n      website: null | string,\r\n      vk: null | string,\r\n      twitter: null | string,\r\n      instagram: null | string,\r\n      youtube: null | string,\r\n      github: null | string,\r\n      mainLink: null | string\r\n    },\r\n  lookingForAJob: boolean,\r\n  lookingForAJobDescription: null | string,\r\n  fullName: string,\r\n  userId: string | number,\r\n  photos:\r\n    {\r\n      small: null | string,\r\n      large: null | string\r\n    }\r\n}\r\n\r\nexport type ProfileReducerType = {\r\n  posts: Array<PostType>,\r\n  newPostText: string,\r\n  profile: null,\r\n  status: string\r\n};\r\n\r\nlet internalState: ProfileReducerType = {\r\n  posts:\r\n    [\r\n      {id: 1, message: 'Hi, how are you?', likesCount: 0},\r\n      {id: 2, message: 'It\\'s my first post', likesCount: 48},\r\n      {id: 3, message: 'Second post', likesCount: 8},\r\n      {id: 4, message: 'e-ge-gey', likesCount: 4}\r\n    ],\r\n  newPostText: 'http://localhost:3001/users',\r\n  profile: null,\r\n  status: ''\r\n};\r\n\r\nconst profileReducer = (state: ProfileReducerType = internalState, action: ActionType) => {\r\n\r\n  switch (action.type) {\r\n    case 'ADD_POST':\r\n      let newPost = {\r\n        id: 5, message:\r\n        action.newPostText,\r\n        likesCount: 0\r\n      };\r\n      return {\r\n        ...state,\r\n        posts: [...state.posts, newPost],\r\n        newPostText: ''\r\n      };\r\n    case 'DELETE_POST':\r\n      return {\r\n        ...state,\r\n        posts: state.posts.filter(p=> p.id !== action.postId)\r\n      };\r\n    case 'SET_USER_PROFILE': {\r\n      return {\r\n        ...state,\r\n        profile: action.profile\r\n      };\r\n    }\r\n    case 'SET_STATUS': {\r\n      return {\r\n        ...state,\r\n        status: action.status\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport type ActionType = InferActionsTypes<typeof actions>;\r\n\r\nexport const actions = {\r\n  addPostActionCreator: (newPostText: string) => ({type: 'ADD_POST', newPostText} as const),\r\n  deletePostActionCreator: (postId: number) => ({type: 'DELETE_POST', postId} as const),\r\n  setUserProfile: (profile: ProfileType) => ({type: 'SET_USER_PROFILE', profile} as const),\r\n  setStatus: (status: string) => ({type: 'SET_STATUS', status} as const),\r\n}\r\n\r\ntype DispatchType = Dispatch<ActionType>;\r\n\r\nexport const getUserProfile = (userId: string) => (dispatch: DispatchType) => {\r\n  usersAPI.getProfile(userId)\r\n    .then(response => {\r\n      dispatch(actions.setUserProfile(response.data));\r\n    });\r\n};\r\n\r\nexport const getStatus = (userId: string) => (dispatch: DispatchType) => {\r\n  profileAPI.getStatus(userId)\r\n    .then(response => {\r\n      dispatch(actions.setStatus(response.data));\r\n    });\r\n};\r\n\r\nexport const updateStatus = (status: string) => (dispatch: DispatchType) => {\r\n  profileAPI.updateStatus(status)\r\n    .then(response => {\r\n      if (response.data.resultCode === 0) {\r\n        dispatch(actions.setStatus(status));\r\n      }\r\n    });\r\n};\r\n\r\nexport default profileReducer"],"sourceRoot":""}